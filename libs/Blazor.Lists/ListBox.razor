@typeparam TItem
@inherits ComponentControlBase
@using CSS = Blazor.Lists.Css.CssClass

<div @attributes="AdditionalAttributes" @ref=componentElement
     class="@GetClass()" style="@Style"
     id="@UniqueId" role="listbox" tabindex="0" aria-label="@AriaLabel"
     @onkeydown="@(async arg => await OnKeyDown(arg))"
     @onkeydown:preventDefault="true"
     @onkeydown:stopPropagation="true">

    @if (ItemSource != null)
    {
        @if (HeaderTemplate != null)
        {
            <div class="@CSS.ListBox.Header">
                @HeaderTemplate
            </div>
        }
        @if (ItemTemplate != null)
        {
            <ul class="@CSS.ListBox.Content" aria-hidden="true">
                @{
                    List<TItem> src = ItemSource.ToList();
                    int count = src.Count;
                    for (int i = 0; i < count; i++)
                    {
                        int index = i;
                        TItem item = src[i];
                        if (ReadOnly)
                        {
                            <li key="@index" role="option" aria-setsize="@count" aria-posinset="@(i + 1)"
                                class="@GetItemClass(item)">
                                @ItemTemplate(item)
                            </li>
                        }
                        else if (IsSelectedState(item))
                        {
                            <li key="@index" role="option" aria-setsize="@count" aria-posinset="@(i + 1)"
                                class="@GetItemClass(@item)"
                                @ref="SelectedItemElement"
                                aria-selected="@IsSelectedState(item)"
                                @onclick="() => ItemClickEventAsync(item)">
                                @ItemTemplate(item)
                            </li>
                        }
                        else
                        {
                            <li key="@index" role="option" aria-setsize="@count" aria-posinset="@(i + 1)"
                                class="@GetItemClass(item)"
                                aria-selected="false"
                                @onclick="() => ItemClickEventAsync(item)">
                                @ItemTemplate(item)
                            </li>
                        }
                    }
                }
            </ul>
        }
        @if (FooterTemplate != null)
        {
            <div class="@CSS.ListBox.Footer">
                @FooterTemplate
            </div>
        }
    }
</div>