@page "/AsyncRelayCommand"
@inherits MvvmComponentBase<AsyncRelayCommandPageViewModel>

@if (ViewModel?.Texts is null || !ViewModel.Texts.Any())
{
    <p>Loading...</p>
}
else
{
    @ViewModel.Texts["AsyncRelayCommand and AsyncRelayCommand<T&gt;"].MarkDownToMarkUp()
    @ViewModel.Texts["How they work"].MarkDownToMarkUp()
    @ViewModel.Texts["Working with asynchronous commands"].MarkDownToMarkUp()

    <TabControl>
        <Panels>
            <TabPanel Title="Sample">
                <div class="mb-3">
                    <p class="sample--output">Status: @ViewModel.DownloadTextCommand.ExecutionTask?.Status</p>
                    @{
                        string? GetResult(object? executionTask)
                        {
                            if (executionTask is Task<string> task)
                                return task.Status == TaskStatus.RanToCompletion ? task.Result : default;

                            return default;
                        }
                        <p class="sample--output">Result: @GetResult(ViewModel.DownloadTextCommand.ExecutionTask)</p>
                    }
                    <button type="button"
                            class="btn btn-primary" @onclick="async () => 
                            {
                                await ViewModel.DownloadTextCommand.ExecuteAsync(null);
                                await InvokeAsync(StateHasChanged);
                            }">
                        Click me!
                    </button>
                </div>
            </TabPanel>
            <TabPanel Title="Razor">
                @StaticStrings.AsyncRelayCommand.sample1Razor.MarkDownToMarkUp()
            </TabPanel>
            <TabPanel Title="C#">
                @StaticStrings.AsyncRelayCommand.sample1csharp.MarkDownToMarkUp()
            </TabPanel>
        </Panels>
    </TabControl>
}

@code {

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await ViewModel!.LoadDocsCommand.ExecuteAsync("AsyncRelayCommand");
    }
}